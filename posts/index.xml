<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 3dw42d-p&#39;5 8109</title>
        <link>https://blog.edward-p.xyz/posts/</link>
        <description>Recent content in Posts on 3dw42d-p&#39;5 8109</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Fri, 22 Jan 2021 17:27:43 +0800</lastBuildDate>
        <atom:link href="https://blog.edward-p.xyz/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>HotswapAgent 简单使用</title>
            <link>https://blog.edward-p.xyz/posts/2021/01/hotswap-agent/</link>
            <pubDate>Fri, 22 Jan 2021 17:27:43 +0800</pubDate>
            
            <guid>https://blog.edward-p.xyz/posts/2021/01/hotswap-agent/</guid>
            <description>写在最前面 作为 JVM 语言开发者，自然都听说过大名鼎鼎的 JRebel 吧。
没听说过？ 好吧，编不下去了，直接进入主题吧
实际项目开发中的热部署需求 没有热部署: 修改代码-&amp;gt;重新编译-&amp;gt;重新部署整个项目 (通常会花费5秒以上)-&amp;gt;继续测试
有热部署: 修改代码-&amp;gt;重新编译-&amp;gt;通过调试器替换变化的字节码文件 ()-&amp;gt;继续测试
热部署为什么需要插件 其实原版 JDK 就可以实现热部署，只是功能非常地局限，可以实现方法内代码的在线更新，但不能实现新增方法和删除方法。
于是才就有了热部署插件。
JRebel 和 HotswapAgent 的区别  JRebel 更加成熟，支持更多框架和插件 JRebel 不开源，并且要价不菲！ Jrebel 在热加载时会修改所有的字节码文件，因此必须要安装一个 IDE 插件才能使调试功能不受影响 HotswapAgent 只需要很简单的配置即可使用（甚至不需要写任何配置文件） HtoswapAgent 是基于 DCEVM (一款魔改增强的 JVM) 实现的，IDE 仍然可以使用 JDK 原生的 Debug 方式, 因此不需要安装额外的插件 HotswapAgent 是开源的！！！！  前置准备 (准备一个支持方法热加载的 JVM) DCEVM Dynamic Code Evolution VM (动态代码演化虚拟机) 项目地址
是一款开源项目，旨在让 JVM 能够对方法新增和删除实现热加载
 在该项目的 release 页面找到对应 JDK 版本的 Installer 使用 Installer 安装 DCEVM 到你的 JDK 环境中 通过在 VM Options 中加上 -XXaltjvm=dcevm 即可以 DCEVM 启动  问题是：DCEVM 支持的是 OpenJDK 而非 Oracle JDK ！！!</description>
            <content type="html"><![CDATA[<h2 id="写在最前面">写在最前面</h2>
<p>作为 JVM 语言开发者，自然都听说过大名鼎鼎的 JRebel 吧。</p>
<p><del>没听说过？ 好吧，编不下去了，直接进入主题吧</del></p>
<h2 id="实际项目开发中的热部署需求">实际项目开发中的热部署需求</h2>
<p>没有热部署: 修改代码-&gt;重新编译-&gt;重新部署整个项目 (通常会花费5秒以上)-&gt;继续测试</p>
<p>有热部署: 修改代码-&gt;重新编译-&gt;通过调试器替换变化的字节码文件 ()-&gt;继续测试</p>
<h2 id="热部署为什么需要插件">热部署为什么需要插件</h2>
<p>其实原版 JDK 就可以实现热部署，只是功能非常地局限，可以实现方法内代码的在线更新，但不能实现新增方法和删除方法。</p>
<p>于是才就有了热部署插件。</p>
<h2 id="jrebel-和-hotswapagent-的区别">JRebel 和 HotswapAgent 的区别</h2>
<ul>
<li>JRebel 更加成熟，支持更多框架和插件</li>
<li>JRebel 不开源，并且要价不菲！</li>
<li>Jrebel 在热加载时会修改所有的字节码文件，因此必须要安装一个 IDE 插件才能使调试功能不受影响</li>
<li>HotswapAgent 只需要很简单的配置即可使用（甚至不需要写任何配置文件）</li>
<li>HtoswapAgent 是基于 <a href="#dcevm">DCEVM</a> (一款魔改增强的 JVM) 实现的，IDE 仍然可以使用 JDK 原生的 Debug 方式, 因此不需要安装额外的插件</li>
<li>HotswapAgent 是开源的！！！！</li>
</ul>
<h2 id="前置准备-准备一个支持方法热加载的-jvm">前置准备 (准备一个支持方法热加载的 JVM)</h2>
<h3 id="dcevm">DCEVM</h3>
<p>Dynamic Code Evolution VM (动态代码演化虚拟机) <a href="https://github.com/dcevm/dcevm">项目地址</a></p>
<p>是一款开源项目，旨在让 JVM 能够对方法新增和删除实现热加载</p>
<ol>
<li>在该项目的 <a href="https://github.com/dcevm/dcevm/releases">release</a> 页面找到对应 JDK 版本的 Installer</li>
<li>使用 Installer 安装 DCEVM 到你的 JDK 环境中</li>
<li>通过在 <code>VM Options</code> 中加上 <code>-XXaltjvm=dcevm</code> 即可以 DCEVM 启动</li>
</ol>
<p><strong>问题是：DCEVM 支持的是 OpenJDK 而非 Oracle JDK ！！!</strong></p>
<p>看到这里你可能想说：那我还得找个 DCEVM 支持的 OpenJDK 比如 openjdk-8u181, 然后下载 8u181 版本对应的 Installer, 可是你说的 openjdk-8u181 在哪儿呢，难道要我去自己下 openjdk 代码然后自己编译？</p>
<p>所以推荐的办法是直接使用 <a href="https://github.com/TravaOpenJDK/trava-jdk-11-dcevm">TravaOpenJDK</a></p>
<h3 id="travaopenjdk">TravaOpenJDK</h3>
<p>TravaOpenJDK 是为开发者量身定制的 OpenJDK，他将 DCEVM 作为了它默认的 JVM，让 DCEVM 能够开箱即用。</p>
<p>说了半天，估计汝也不耐烦了，直接给链接：</p>
<ul>
<li><a href="https://github.com/TravaOpenJDK/trava-jdk-11-dcevm/releases/">trava-jdk-11-dcevm</a></li>
<li><a href="https://github.com/TravaOpenJDK/trava-jdk-8-dcevm/releases/">trava-jdk-8-dcevm</a> (Windows 版暂时还没编译出来，Windows 用户先用着 jdk 11 吧)</li>
</ul>
<p><strong>注意：TravaOpenJDK 已经把 DCEVM 作为了它默认的 JVM，无需添加 <code>-XXaltjvm=dcevm</code> 参数</strong></p>
<h2 id="使用-hotswapagent">使用 HotswapAgent</h2>
<p>这时你可能要问：我已经用上了 DCEVM 了，方法新增/删除的热加载已经能实现了，那我还需要什么？</p>
<p>确实是这样，新增/删除的方法能实现热加载已经很香了。</p>
<p>试问：如果新增的方法上面有一个 <code>@RequestMapping</code> 注解的情况呢？那么谁去通知 Spring 框架去重新扫描这个方法上的注解呢？</p>
<p>答案就是 HotswapAgent</p>
<p><strong>TravaJDK 11 已经整合了 HotswapAgent</strong></p>
<p>使用方法：</p>
<ol>
<li>
<p>VM Options 中添加:</p>
<ul>
<li>
<p><code>-XX:HotswapAgent=fatjar</code> 使用内置的完整版 HotswapAgent (提供框架支持)</p>
</li>
<li>
<p><code>-XX:HotswapAgent=core</code> 使用内置精简版 HotswapAgent (不支持框架)</p>
</li>
<li>
<p><code>-XX:HotswapAgent=external -javaagent:&lt;path&gt;/hotswap-agent.jar</code> 使用外置 hotswap-agent.jar</p>
<ul>
<li><img src="https://paste.edward-p.xyz/image/20210122222606.png" alt="image-20210122222606"></li>
</ul>
</li>
</ul>
</li>
<li>
<p>设置 <code>On 'Update' action</code> 为 <code>Update classes and resources</code></p>
<ul>
<li><img src="https://paste.edward-p.xyz/image/20210122223437.png" alt="image-20210122223437"></li>
</ul>
</li>
<li>
<p>以 Debug 方式启动项目</p>
<ul>
<li>
<p>应该能看到控制台打印出一些 HotswapAgent 相关的日志，例如：</p>
<pre><code>HOTSWAP AGENT: 22:25:07.654 INFO (org.hotswap.agent.config.PluginRegistry) - Plugin 'org.hotswap.agent.plugin.spring.SpringPlugin' initialized in ClassLoader 'jdk.internal.loader.ClassLoaders$AppClassLoader@77556fd'.
HOTSWAP AGENT: 22:25:07.655 INFO (org.hotswap.agent.plugin.spring.SpringPlugin) - Spring plugin initialized - Spring core version '5.3.3'
</code></pre></li>
</ul>
</li>
<li>
<p>修改代码之后通过 Update 进行热加载</p>
<ul>
<li><img src="https://paste.edward-p.xyz/image/20210122223717.png" alt="image-20210122223717"></li>
</ul>
</li>
<li>
<p>设置 Idea 编译后自动热加载 (可选)</p>
<ul>
<li><img src="https://paste.edward-p.xyz/image/20210122224913.png" alt="image-20210122224913"></li>
</ul>
</li>
</ol>
<p><strong>TravaJDK 8 不含内置 HotswapAgent</strong></p>
<p>只能通过 <code>-javaagent:&lt;path&gt;/hotswap-agent.jar</code> 指定外置 HotswapAgent。</p>
<p><a href="https://github.com/HotswapProjects/HotswapAgent/releases">hotswap-agent.jar</a></p>
<h2 id="使用效果">使用效果</h2>


<video width="100%" loop autoplay>
  <source src="https://paste.edward-p.xyz/video/20210122231257.mp4" type="video/mp4">
</video>


]]></content>
        </item>
        
        <item>
            <title>拥抱 Hugo</title>
            <link>https://blog.edward-p.xyz/posts/2021/01/hello-hugo/</link>
            <pubDate>Wed, 20 Jan 2021 20:01:37 +0800</pubDate>
            
            <guid>https://blog.edward-p.xyz/posts/2021/01/hello-hugo/</guid>
            <description>新的开始，目前旧文章还没有迁移过来，有空再说（看心情）。。。。。。
原来的 Hexo 博客主题太臃肿了，打算重新开始，所以顺手换个 Hugo 来试试。好像很有道理</description>
            <content type="html"><![CDATA[<p>新的开始，目前旧文章还没有迁移过来，有空再说（看心情）。。。。。。</p>
<p>原来的 Hexo 博客主题太臃肿了，打算重新开始，所以顺手换个 Hugo 来试试。<del>好像很有道理</del></p>
]]></content>
        </item>
        
    </channel>
</rss>
